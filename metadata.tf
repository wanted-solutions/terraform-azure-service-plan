// Do not modify this file, it is generated by the wanted-solutions/template-terraform-module module and could be overwritten in the future updates.
locals {
  definitions = {
    default_tags = {
      managed_by = "Terraform"
    }
    resource_timeouts = {
      default = {
        create = "30m"
        read   = "5m"
        update = "30m"
        delete = "30m"
      }
    }
    validator_error_messages = {
      default                     = "Unknown error during validation has occured."
      default_resource_tags_key   = "Resource tags key is not in valid format, please check your \"metadata\" object."
      default_resource_tags_value = "Resource tags value is not in valid format, please check your \"metadata\" object."
      resource_tags_key           = "Resource tags key is not in valid format, please check your \"tags\" object."
      resource_tags_value         = "Resource tags value is not in valid format, please check your \"tags\" object."
      timeout_key                 = "Timeout key is not valid, please check your \"metadata\" object, only \"create\", \"read\", \"update\" and \"delete\" can be used as metadata key value."
      timeout_value               = "Timeout value is not in valid format, please check your \"metadata\" object."
      os_type_key                 = "OS type key is not valid, please check your \"os_type\" variable."
      os_type_value               = "The os_type variable must be one of: Windows, Linux, or WindowsContainer."
      sku_name_key                = "SKU name key is not valid, please check your \"sku_name\" variable."
      sku_name_value              = "The sku_name variable must be one of the allowed SKU values."
    }
    validator_expressions = {
      default             = ".*"
      resource_tags_key   = "^[a-zA-Z0-9_\\-\\.]{1,512}$"
      resource_tags_value = "^.{1,256}$"
      timeout_key         = "^(create|read|update|delete)$"
      timeout_value       = "^[0-9]+[smh]$"
      os_type             = "^(Windows|Linux|WindowsContainer)$"
      sku_name            = "^(B1|B2|B3|D1|F1|I1|I2|I3|I1v2|I2v2|I3v2|I4v2|I5v2|I6v2|P1v2|P2v2|P3v2|P0v3|P1v3|P2v3|P3v3|P1mv3|P2mv3|P3mv3|P4mv3|P5mv3|S1|S2|S3|SHARED|EP1|EP2|EP3|FC1|WS1|WS2|WS3|Y1)$"
   
    }
  }
  metadata = {
    default_tags = merge(
      local.definitions.default_tags,
      var.metadata.default_tags
    )
    validator_error_messages = merge(
      local.definitions.validator_error_messages,
      var.metadata.validator_error_messages
    )
    validator_expressions = merge(
      local.definitions.validator_expressions,
      var.metadata.validator_expressions
    )
    resource_timeouts = merge(
      local.definitions.resource_timeouts,
      var.metadata.resource_timeouts
    )
  }
  tags = merge(local.metadata.default_tags, var.tags)
}
// Define the module input tags variable
variable "tags" {
  description = "Key value pairs of custom tags to be applied to the module resources."
  type        = map(string)
  default     = {}

  // Resource tags value validation
  validation {
    condition = alltrue(
      flatten([
        for value in var.tags : [
          can(
            regex(
              lookup(
                local.definitions.validator_expressions,
                "resource_tags_value",
                local.definitions.validator_expressions["default"]
              ),
              value
            )
          )
        ]
      ])
    )
    error_message = lookup(
      local.definitions.validator_error_messages,
      "resource_tags_value",
      local.definitions.validator_error_messages["default"]
    )
  }
  // Resource tags key validation
  validation {
    condition = alltrue(
      flatten([
        for key, value in var.tags : [
          can(
            regex(
              lookup(
                local.definitions.validator_expressions,
                "resource_tags_key",
                local.definitions.validator_expressions["default"]
              ),
              key
            )
          )
        ]
      ])
    )
    error_message = lookup(
      local.definitions.validator_error_messages,
      "resource_tags_key",
      local.definitions.validator_error_messages["default"]
    )
  }
}
// Define the module input metadata variable
variable "metadata" {
  description = "Module metadata object to give user possibility to override default module values."
  type = object({
    default_tags             = optional(map(string), {})
    resource_timeouts        = optional(map(map(string)), {})
    validator_error_messages = optional(map(string), {})
    validator_expressions    = optional(map(string), {})
    os_type                  = optional(string, null)
    sku_name                 = optional(string, null)
  })
  default = {}
  // Timeout values validation
  validation {
    condition = alltrue(
      flatten([
        for value in var.metadata.resource_timeouts : [
          for timeout in value : timeout != null
          ? can(
            regex(
              lookup(
                local.definitions.validator_expressions,
                "timeout_value",
                local.definitions.validator_expressions["default"]
              ),
              timeout
            )
          )
          : true
        ]
      ])
    )
    error_message = lookup(
      local.definitions.validator_error_messages,
      "timeout_value",
      local.definitions.validator_error_messages["default"]
    )
  }
  // Timeout keys validation
  validation {
    condition = alltrue(
      flatten([
        for value in var.metadata.resource_timeouts : [
          for key, timeout in value : timeout != null
          ? can(
            regex(
              lookup(
                local.definitions.validator_expressions,
                "timeout_key",
                local.definitions.validator_expressions["default"]
              ),
              key
            )
          )
          : true
        ]
      ])
    )
    error_message = lookup(
      local.definitions.validator_error_messages,
      "timeout_key",
      local.definitions.validator_error_messages["default"]
    )
  }
  // Default tags value validation
  validation {
    condition = alltrue(
      flatten([
        for value in var.metadata.default_tags : [
          can(
            regex(
              lookup(
                local.definitions.validator_expressions,
                "resource_tags_value",
                local.definitions.validator_expressions["default"]
              ),
              value
            )
          )
        ]
      ])
    )
    error_message = lookup(
      local.definitions.validator_error_messages,
      "default_resource_tags_value",
      local.definitions.validator_error_messages["default"]
    )
  }
  // Default tags key validation
  validation {
    condition = alltrue(
      flatten([
        for key, value in var.metadata.default_tags : [
          can(
            regex(
              lookup(
                local.definitions.validator_expressions,
                "resource_tags_key",
                local.definitions.validator_expressions["default"]
              ),
              key
            )
          )
        ]
      ])
    )
    error_message = lookup(
      local.definitions.validator_error_messages,
      "default_resource_tags_key",
      local.definitions.validator_error_messages["default"]
    )
  }

// OS type validation
  validation {
    condition = var.metadata.os_type == null || can(
      regex(
        lookup(
          local.definitions.validator_expressions,
          "os_type",
          local.definitions.validator_expressions["default"]
        ),
        var.metadata.os_type
      )
    )
    error_message = lookup(
      local.definitions.validator_error_messages,
      "os_type_value",
      local.definitions.validator_error_messages["default"]
    )
  }

  // SKU name validation
  validation {
    condition = var.metadata.sku_name == null || can(
      regex(
        lookup(
          local.definitions.validator_expressions,
          "sku_name",
          local.definitions.validator_expressions["default"]
        ),
        var.metadata.sku_name
      )
    )
    error_message = lookup(
      local.definitions.validator_error_messages,
      "sku_name_value",
      local.definitions.validator_error_messages["default"]
    )
  }
}